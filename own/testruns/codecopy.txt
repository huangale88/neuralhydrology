from pathlib import Path

import pandas as pd

import matplotlib.pyplot as plt
import torch
from neuralhydrology.evaluation import metrics, get_tester
from neuralhydrology.nh_run import start_run
from neuralhydrology.utils.config import Config
# by default we assume that you have at least one CUDA-capable NVIDIA GPU or MacOS with Metal support
if torch.cuda.is_available() or torch.backends.mps.is_available():
    start_run(config_file=Path("1_basin.yml"))

# fall back to CPU-only mode
else:
    start_run(config_file=Path("1_basin.yml"), gpu=-1)
run_dir = Path("runs/test_run_2504_020929")  # you'll find this path in the output of the training above.
run_config = Config(Path("1_basin.yml"))

# create a tester instance and start evaluation
tester = get_tester(cfg=Config(run_dir / "config.yml"), run_dir=run_dir, period="test", init_model=True)
results = tester.evaluate(save_results=False, metrics=run_config.metrics)

results.keys()
# extract observations and simulations
daily_qobs = results["01022500"]["1D"]["xr"]["QObs(mm/h)_obs"]
daily_qsim = results["01022500"]["1D"]["xr"]["QObs(mm/h)_sim"]

fig, ax = plt.subplots(figsize=(16,10))
ax.plot(daily_qobs["date"], daily_qobs, label="Observed")
ax.plot(daily_qsim["date"], daily_qsim, label="Simulated")
ax.legend()
ax.set_ylabel("Discharge (mm/h)")
ax.set_title(f"Test period - daily NSE {results['01022500']['1D']['NSE_1D']:.3f}")

# Calculate some metrics
values = metrics.calculate_all_metrics(daily_qobs.isel(time_step=-1), daily_qsim.isel(time_step=-1))
print("Daily metrics:")
for key, val in values.items():
    print(f"  {key}: {val:.3f}")
# Extract a date slice of observations and simulations
hourly_xr = results["01022500"]["1h"]["xr"].sel(date=slice("10-1995", None))

# The hourly data is indexed with two indices: The date (in days) and the time_step (the hour within that day).
# As we want to get a continuous plot of several days' hours, we select all 24 hours of each day and then stack
# the two dimensions into one consecutive datetime dimension.
hourly_xr = hourly_xr.isel(time_step=slice(-24, None)).stack(datetime=['date', 'time_step'])

# Reset the MultiIndex to avoid conflicts
hourly_xr = hourly_xr.reset_index('datetime')

# Assign the new continuous 'datetime' coordinate
hourly_xr = hourly_xr.assign_coords(
    datetime=hourly_xr['date'] + pd.to_timedelta(hourly_xr['time_step'], unit='h')
)

# Extract observation and simulation data
hourly_qobs = hourly_xr["QObs(mm/h)_obs"]
hourly_qsim = hourly_xr["QObs(mm/h)_sim"]

# Plot the data
fig, ax = plt.subplots(figsize=(16, 10))
ax.plot(hourly_qobs["datetime"], hourly_qobs, label="Observation")
ax.plot(hourly_qsim["datetime"], hourly_qsim, label="Simulation")
ax.set_ylabel("Discharge (mm/h)")
ax.set_title(f"Test period - hourly NSE {results['01022500']['1h']['NSE_1h']:.3f}")
ax.legend()

plt.show()